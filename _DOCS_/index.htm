<!DOCTYPE html>
<html>
	<head>
		<title></title>
		<meta charset='utf-8'>
		<style type='text/css'>
			.end {color: red}
			.extends {color: grey}
			.description {color: blue; margin-left: 10px}
			.classModule {font-size: 12px; color: grey; margin-top: 0}
		</style>
	</head>
	<body>
		<h1>
		Idle
		<span class='extends'></span><br>
		<span class='classModule'>../Actions/Idle.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(input = {})  <span class='description'></span><br><span class='end'></span> <b>reset</b>()  <span class='description'></span><br><span class='end'></span> <b>subject</b>(subj) {getter/setter} <span class='description'></span><br><span class='end'>boolean</span> <b>abortable</b>(value) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>setOnEnd</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>onStart</b>() {virtual} <span class='description'></span><br><span class='end'></span> <b>onEnd</b>() {virtual} <span class='description'></span><br><span class='end'></span> <b>onAbort</b>() {virtual} <span class='description'></span><br><span class='end'></span> <b>finishAction</b>()  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'></span> <b>draw</b>(ctx) {virtual} <span class='description'></span><br><br>PUBLIC FIELDS <br><b>_subj</b> <span class='description'>Subject of action</span><br><b>_duration</b> <span class='description'>Full action duration time</span><br><b>_isAbortable</b> <span class='description'>Is action can be aborted</span><br><b>_next</b> <span class='description'>Action after end current action</span><br><b>_toRestore</b> <span class='description'>Action to restore on action end</span><br><b>_lasting</b> <span class='description'>How long is action active</span><br><b>_progress</b> <span class='description'>Progress of action [0, 1]</span><br><br><hr><h1>
		Application
		<span class='extends'></span><br>
		<span class='classModule'>../Application.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(config = {})  <span class='description'></span><br><span class='end'></span> <b>_init</b>()  <span class='description'></span><br><span class='end'></span> <b>_loadResources</b>(cb)  <span class='description'></span><br><span class='end'></span> <b>_waitResources</b>(cb)  <span class='description'></span><br><span class='end'></span> <b>initMouseEvents</b>()  <span class='description'></span><br><span class='end'></span> <b>_getPointerOnCanvas</b>()  <span class='description'></span><br><span class='end'></span> <b>storage</b>(key, value)  <span class='description'></span><br><span class='end'></span> <b>setSz</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>pause</b>()  <span class='description'></span><br><span class='end'></span> <b>popUp</b>(sz, input)  <span class='description'></span><br><span class='end'></span> <b>closePopUp</b>()  <span class='description'></span><br><span class='end'></span> <b>getActiveSz</b>()  <span class='description'></span><br><span class='end'></span> <b>getResolution</b>()  <span class='description'></span><br><span class='end'></span> <b>getImgByUrl</b>(imgSrc)  <span class='description'></span><br><span class='end'></span> <b>getImg</b>(imageSource)  <span class='description'></span><br><span class='end'></span> <b>createSprite</b>(img)  <span class='description'></span><br><span class='end'></span> <b>getImgCanvas</b>(image)  <span class='description'></span><br><span class='end'></span> <b>getHtmlCanvas</b>()  <span class='description'></span><br><span class='end'></span> <b>getHtmlContext</b>()  <span class='description'></span><br><span class='end'></span> <b>showFpsDetails</b>()  <span class='description'></span><br><span class='end'></span> <b>onBackButton</b>()  <span class='description'></span><br><span class='end'></span> <b>addOnResize</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>playSound</b>(str, options)  <span class='description'></span><br><span class='end'></span> <b>controlSound</b>(str, options)  <span class='description'></span><br><span class='end'></span> <b>_gameLoop</b>(time)  <span class='description'></span><br><span class='end'></span> <b>_tick</b>()  <span class='description'></span><br><span class='end'></span> <b>_draw</b>()  <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#fpsCounter</b> <span class='description'>Fps counter</span><br><b>#time</b> <span class='description'></span><br><br><hr><h1>
		Camera
		<span class='extends'></span><br>
		<span class='classModule'>../Camera.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(canvas, world)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'></span> <b>widthToPercent</b>(x)  <span class='description'></span><br><span class='end'></span> <b>heightToPercent</b>(y)  <span class='description'></span><br><span class='end'></span> <b>widthPercentsToPx</b>(x)  <span class='description'></span><br><span class='end'></span> <b>heightPercentsToPx</b>(y)  <span class='description'></span><br><span class='end'></span> <b>getViewSize</b>()  <span class='description'></span><br><span class='end'></span> <b>getViewRect</b>()  <span class='description'></span><br><span class='end'></span> <b>getPosition</b>()  <span class='description'></span><br><span class='end'></span> <b>addPosition</b>(offset)  <span class='description'></span><br><span class='end'></span> <b>addView</b>(addition)  <span class='description'></span><br><span class='end'></span> <b>setPosition</b>(point)  <span class='description'></span><br><span class='end'></span> <b>setClip</b>(rect)  <span class='description'></span><br><span class='end'></span> <b>setView</b>(size)  <span class='description'></span><br><span class='end'></span> <b>getWorldFromScreen</b>(point)  <span class='description'></span><br><span class='end'></span> <b>draw</b>()  <span class='description'></span><br><span class='end'></span> <b>tick</b>()  <span class='description'></span><br><span class='end'></span> <b>drawRect</b>(rect)  <span class='description'></span><br><span class='end'></span> <b>setTransform</b>(matrix, ctx = this._ctx)  <span class='description'></span><br><span class='end'></span> <b>_fixClip</b>()  <span class='description'></span><br><span class='end'></span> <b>_calcMainMatrix</b>()  <span class='description'></span><br><span class='end'></span> <b>toggleDrawAxis</b>()  <span class='description'></span><br><br>PRIVATE METHODS <br><span class='end'></span> <b>#drawAxis</b>()  <span class='description'></span><br><span class='end'></span> <b>#cleanCanvas</b>(color = 'gray')  <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#isDrawAxis</b> <span class='description'>Is draw axis</span><br><br><hr><h1>
		FpsCounter
		<span class='extends'></span><br>
		<span class='classModule'>../FpsCounter.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>toggleShow</b>()  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'></span> <b>show</b>(ctx)  <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#details</b> <span class='description'></span><br><b>#accumDelta</b> <span class='description'></span><br><b>#accumFps</b> <span class='description'></span><br><b>#fpsToShow</b> <span class='description'></span><br><b>#iSlot</b> <span class='description'></span><br><b>#maxSlots</b> <span class='description'></span><br><b>#font</b> <span class='description'></span><br><b>#slots</b> <span class='description'></span><br><br><hr><h1>
		Pack
		<span class='extends'></span><br>
		<span class='classModule'>../Pack/Pack.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'></span> <b>reset</b>(options)  <span class='description'></span><br><span class='end'></span> <b>size</b>(size) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>scale</b>(scale) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>position</b>(position) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>anchor</b>(anchor) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>angle</b>(angle) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>z</b>(z) {getter/setter} <span class='description'></span><br><span class='end'></span> <b>_packUpdate</b>()  <span class='description'></span><br><br>PUBLIC FIELDS <br><b>_size</b> <span class='description'></span><br><b>_scale</b> <span class='description'></span><br><b>_position</b> <span class='description'></span><br><b>_anchor</b> <span class='description'></span><br><b>_angle</b> <span class='description'></span><br><b>_z</b> <span class='description'></span><br><br><hr><h1>
		Anchor
		<span class='extends'>extends Point</span><br>
		<span class='classModule'>../primitives/Anchor.js</span><br>
	</h1><hr><h1>
		Offset
		<span class='extends'>extends Point</span><br>
		<span class='classModule'>../primitives/Offset.js</span><br>
	</h1><hr><h1>
		Point
		<span class='extends'>extends XY</span><br>
		<span class='classModule'>../primitives/Point.js</span><br>
	</h1><hr><h1>
		Rect
		<span class='extends'></span><br>
		<span class='classModule'>../primitives/Rect.js</span><br>
	</h1>STATIC METHODS <br><span class='end'>new Rect</span> <b>fromPoints</b>(...points)  <span class='description'></span><br><br>METHODS <br><span class='end'></span> <b>constructor</b>(x = 0, y = 0, width = 0, height = 0)  <span class='description'></span><br><span class='end'>new Rect</span> <b>clone</b>()  <span class='description'></span><br><span class='end'>this</span> <b>copy</b>(rectangle)  <span class='description'></span><br><span class='end'>boolean</span> <b>isContains</b>(point)  <span class='description'></span><br><span class='end'>boolean</span> <b>isIntersect</b>(rect)  <span class='description'></span><br><span class='end'>new Point</span> <b>intersectValue</b>(rect)  <span class='description'></span><br><span class='end'>new Point</span> <b>intersectResolve</b>(rect)  <span class='description'></span><br><span class='end'>void</span> <b>set</b>(x, y, width, height)  <span class='description'></span><br><span class='end'>number</span> <b>x</b>(x) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>y</b>(y) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>width</b>(width) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>height</b>(height) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>w</b>(w) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>h</b>(h) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>left</b>()  <span class='description'></span><br><span class='end'>number</span> <b>right</b>()  <span class='description'></span><br><span class='end'>number</span> <b>top</b>()  <span class='description'></span><br><span class='end'>number</span> <b>bottom</b>()  <span class='description'></span><br><span class='end'>new Size</span> <b>size</b>()  <span class='description'></span><br><span class='end'>new Point</span> <b>center</b>()  <span class='description'></span><br><span class='end'>void</span> <b>enclose</b>(point)  <span class='description'></span><br><span class='end'>void</span> <b>debug</b>()  <span class='description'></span><br><br><hr><h1>
		Scale
		<span class='extends'>extends Size</span><br>
		<span class='classModule'>../primitives/Scale.js</span><br>
	</h1><hr><h1>
		Size
		<span class='extends'>extends XY</span><br>
		<span class='classModule'>../primitives/Size.js</span><br>
	</h1>METHODS <br><span class='end'>number</span> <b>width</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>height</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>w</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>h</b>(value) {getter/setter} <span class='description'></span><br><br><hr><h1>
		Value
		<span class='extends'></span><br>
		<span class='classModule'>../primitives/Value.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(value = 0)  <span class='description'></span><br><span class='end'>boolean</span> <b>isClear</b>()  <span class='description'></span><br><span class='end'>this</span> <b>clear</b>()  <span class='description'></span><br><span class='end'>this</span> <b>invert</b>()  <span class='description'></span><br><span class='end'>mixed</span> <b>value</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>mixed</span> <b>v</b>(value) {getter/setter} <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#value</b> <span class='description'>Mixed saved value</span><br><br><hr><h1>
		XY
		<span class='extends'></span><br>
		<span class='classModule'>../primitives/XY.js</span><br>
	</h1>STATIC METHODS <br><span class='end'>new XY</span> <b>ZERO</b>()  <span class='description'></span><br><span class='end'>new XY</span> <b>spawn</b>(...args)  <span class='description'></span><br><span class='end'>new XY</span> <b>addition</b>(xy1, xy2)  <span class='description'></span><br><span class='end'>new XY</span> <b>subtraction</b>(xy1, xy2)  <span class='description'></span><br><br>METHODS <br><span class='end'></span> <b>constructor</b>(x = 0, y = x)  <span class='description'>Or constructor(vector)</span><br><span class='end'>new XY</span> <b>clone</b>()  <span class='description'></span><br><span class='end'>new XY</span> <b>cloneInverted</b>()  <span class='description'></span><br><span class='end'>this</span> <b>copy</b>(xy)  <span class='description'></span><br><span class='end'>this</span> <b>copyOrSet</b>(xy, x, y)  <span class='description'></span><br><span class='end'>this</span> <b>set</b>(x = 0, y = x)  <span class='description'></span><br><span class='end'>boolean</span> <b>hasNaN</b>()  <span class='description'></span><br><span class='end'>boolean</span> <b>isZero</b>()  <span class='description'></span><br><span class='end'>boolean</span> <b>isEquals</b>(x, y = x)  <span class='description'>Or isEquals(xy)</span><br><span class='end'>boolean</span> <b>isNear</b>(xy, epsilon = 0)  <span class='description'></span><br><span class='end'>boolean</span> <b>isCorrect</b>()  <span class='description'>Has no NaN</span><br><span class='end'>boolean</span> <b>isFilled</b>()  <span class='description'>Has no NaN</span><br><span class='end'>AXIS</span> <b>getNaNAxis</b>()  <span class='description'></span><br><span class='end'>number</span> <b>getDistance</b>(xy)  <span class='description'></span><br><span class='end'>number</span> <b>getLength</b>()  <span class='description'></span><br><span class='end'>number</span> <b>getRatio</b>()  <span class='description'></span><br><span class='end'>this</span> <b>invert</b>()  <span class='description'></span><br><span class='end'>this</span> <b>translate</b>(xy)  <span class='description'></span><br><span class='end'>this</span> <b>add</b>(xy)  <span class='description'></span><br><span class='end'>this</span> <b>sub</b>(xy)  <span class='description'></span><br><span class='end'>this</span> <b>fixNaNToSimilar</b>(xy)  <span class='description'></span><br><span class='end'>number</span> <b>x</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>y</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>string</span> <b>toString</b>()  <span class='description'></span><br><span class='end'>void</span> <b>debug</b>()  <span class='description'>console log</span><br><br>PRIVATE METHODS <br><span class='end'>void</span> <b>#check</b>(value)  <span class='description'>Check if value number</span><br><br>PUBLIC FIELDS <br><b>static</b> <span class='description'></span><br><b>static</b> <span class='description'></span><br><b>static</b> <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#x</b> <span class='description'>X value</span><br><b>#y</b> <span class='description'>Y value</span><br><br><hr><h1>
		Manager
		<span class='extends'></span><br>
		<span class='classModule'>../Seizure/Manager.js</span><br>
	</h1>STATIC METHODS <br><span class='end'></span> <b>registerSeizure</b>(name, sz)  <span class='description'></span><br><br>METHODS <br><span class='end'></span> <b>constructor</b>()  <span class='description'></span><br><span class='end'></span> <b>init</b>()  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'></span> <b>draw</b>()  <span class='description'></span><br><span class='end'></span> <b>create</b>(sz, input = {}, activate = false)  <span class='description'></span><br><span class='end'></span> <b>set</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>_set</b>(sz, input, popup = false)  <span class='description'></span><br><span class='end'></span> <b>reset</b>()  <span class='description'></span><br><span class='end'></span> <b>countActives</b>()  <span class='description'></span><br><span class='end'></span> <b>getActive</b>()  <span class='description'></span><br><span class='end'></span> <b>forActive</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>forAll</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>popUp</b>(sz, input)  <span class='description'></span><br><span class='end'></span> <b>closePopUp</b>()  <span class='description'></span><br><span class='end'></span> <b>_closeActive</b>()  <span class='description'></span><br><br>PUBLIC FIELDS <br><b>static</b> <span class='description'></span><br><br><hr><h1>
		SeizureBase
		<span class='extends'></span><br>
		<span class='classModule'>../Seizure/Seizure.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'></span> <b>init</b>()  <span class='description'></span><br><span class='end'></span> <b>getWorldFromScreen</b>(point)  <span class='description'></span><br><span class='end'></span> <b>getCamera</b>()  <span class='description'></span><br><span class='end'></span> <b>getWorld</b>()  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'></span> <b>draw</b>()  <span class='description'></span><br><span class='end'></span> <b>onClickDown</b>(point, pointer)  <span class='description'></span><br><span class='end'></span> <b>onClickUp</b>(point, pointer)  <span class='description'></span><br><span class='end'></span> <b>onClick</b>(point, pointer)  <span class='description'></span><br><span class='end'></span> <b>onBackButton</b>()  <span class='description'></span><br><span class='end'></span> <b>isHitSomething</b>(point)  <span class='description'></span><br><span class='end'></span> <b>_doWithSubjIfHits</b>(point, fn)  <span class='description'></span><br><span class='end'></span> <b>setCamera</b>(view, eye)  <span class='description'></span><br><span class='end'></span> <b>setBackground</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>makeSubject</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>addSubject</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>cameraFollow</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>getHud</b>()  <span class='description'></span><br><span class='end'></span> <b>setHud</b>(sz, options = {})  <span class='description'></span><br><span class='end'></span> <b>getParent</b>()  <span class='description'></span><br><br>PUBLIC FIELDS <br><b>camera</b> <span class='description'>Camera</span><br><br><hr><h1>
		Seizure
		<span class='extends'>extends mixins: ScrollMix, InputMix, SeizureBase</span><br>
		<span class='classModule'>../Seizure/Seizure.js</span><br>
	</h1><hr><h1>
		Storage
		<span class='extends'></span><br>
		<span class='classModule'>../Storage.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>()  <span class='description'></span><br><span class='end'>void</span> <b>remove</b>(key)  <span class='description'></span><br><span class='end'>void</span> <b>set</b>(key, value)  <span class='description'></span><br><span class='end'>string | null</span> <b>get</b>(key)  <span class='description'></span><br><span class='end'>string | null</span> <b>store</b>(key, value) {getter/setter} <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#storage</b> <span class='description'>window.localStorage</span><br><br><hr><h1>
		ActionableMix
		<span class='extends'>extends base</span><br>
		<span class='classModule'>../Subject/ActionableMix.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'>void</span> <b>reset</b>(options)  <span class='description'>Reset</span><br><span class='end'></span> <b>getAction</b>()  <span class='description'></span><br><span class='end'></span> <b>setAction</b>(action)  <span class='description'></span><br><span class='end'>void</span> <b>forceAction</b>(action)  <span class='description'>Enforce action set</span><br><span class='end'></span> <b>setIdleAction</b>()  <span class='description'>Try set Idle action</span><br><span class='end'></span> <b>forceIdleAction</b>()  <span class='description'>Enforce Idle action set</span><br><span class='end'></span> <b>setActionOnEnd</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'></span> <b>draw</b>(ctx)  <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#action</b> <span class='description'>Current action</span><br><b>#idleAction</b> <span class='description'>Instance of Idle action</span><br><br><hr><h1>
		Sprite
		<span class='extends'>extends mixins: SpriteMix, Subject</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		Actionable
		<span class='extends'>extends mixins: ActionableMix, Sprite</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		Solid
		<span class='extends'>extends mixins: SolidMix, Sprite</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		GhostSolid
		<span class='extends'>extends mixins: SolidMix, Subject</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		SolidActor
		<span class='extends'>extends mixins: SolidMix, Actionable</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		DnD
		<span class='extends'>extends mixins: DragAndDropMix, Sprite</span><br>
		<span class='classModule'>../Subject/index.js</span><br>
	</h1><hr><h1>
		RelationshipMix
		<span class='extends'>extends base</span><br>
		<span class='classModule'>../Subject/RelationshipMix.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'></span> <b>reset</b>(options)  <span class='description'></span><br><span class='end'></span> <b>parent</b>(parent)  <span class='description'></span><br><span class='end'></span> <b>subjects</b>()  <span class='description'></span><br><span class='end'></span> <b>addSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>deleteSubjects</b>()  <span class='description'></span><br><span class='end'></span> <b>stealSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>spliceSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>cleanRelationships</b>()  <span class='description'></span><br><span class='end'></span> <b>forAllSubjects</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>forSubjects</b>(fn)  <span class='description'></span><br><br><hr><h1>
		Subject
		<span class='extends'></span><br>
		<span class='classModule'>../Subject/Subject.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>reset</b>(options)  <span class='description'></span><br><span class='end'></span> <b>tick</b>(delta)  <span class='description'></span><br><span class='end'>string</span> <b>bgColor</b>(color) {getter/setter} <span class='description'>Set background color</span><br><span class='end'></span> <b>draw</b>(context)  <span class='description'></span><br><span class='end'></span> <b>onClickDown</b>(worldPoint)  <span class='description'></span><br><span class='end'></span> <b>onClickUp</b>(worldPoint)  <span class='description'></span><br><span class='end'></span> <b>onClick</b>(worldPoint)  <span class='description'></span><br><span class='end'></span> <b>isClickable</b>()  <span class='description'></span><br><span class='end'></span> <b>isHit</b>(worldPoint)  <span class='description'></span><br><span class='end'></span> <b>getWorldPosition</b>()  <span class='description'></span><br><span class='end'></span> <b>getWorld</b>()  <span class='description'></span><br><span class='end'></span> <b>getBounds</b>()  <span class='description'></span><br><span class='end'></span> <b>addPosition</b>(offset)  <span class='description'></span><br><span class='end'></span> <b>movePosition</b>(offset)  <span class='description'></span><br><span class='end'></span> <b>fitInRect</b>(rect)  <span class='description'></span><br><span class='end'></span> <b>_getLocalRect</b>()  <span class='description'></span><br><span class='end'></span> <b>_drawWorldBorder</b>(context)  <span class='description'></span><br><span class='end'></span> <b>_drawLocalBorder</b>(context)  <span class='description'></span><br><span class='end'></span> <b>_drawCenter</b>(context)  <span class='description'></span><br><br>PRIVATE METHODS <br><span class='end'></span> <b>#drawBgColor</b>(context)  <span class='description'></span><br><br>PUBLIC FIELDS <br><b>_bgColor</b> <span class='description'>Background color</span><br><b>_tickFn</b> <span class='description'>Tick function</span><br><b>_onClick</b> <span class='description'>On click</span><br><b>_isClickable</b> <span class='description'>Is clickable</span><br><b>_isDrawDebug</b> <span class='description'>Draw debug shapes</span><br><br><hr><h1>
		Time
		<span class='extends'></span><br>
		<span class='classModule'>../Time.js</span><br>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>()  <span class='description'></span><br><span class='end'>number</span> <b>now</b>()  <span class='description'></span><br><span class='end'>number</span> <b>update</b>()  <span class='description'></span><br><br>PRIVATE FIELDS <br><b>#time</b> <span class='description'>Time value</span><br><br><hr><hr><h1>FUNCTIONS</h1><hr><h1>../maths.js</h1><span class='end'></span> <b>rand</b>(min = 0, max = 1, round = true) <span class='description'></span><br><span class='end'></span> <b>any</b>(...args) <span class='description'></span><br><span class='end'></span> <b>shuffleArray</b>(a) <span class='description'></span><br><span class='end'></span> <b>randDispersion</b>(x) <span class='description'></span><br><span class='end'></span> <b>increaseToRatio</b>(size, target) <span class='description'></span><br><span class='end'></span> <b>getOffset</b>(size, anchor) <span class='description'></span><br><span class='end'></span> <b>reduceToSize</b>(size, value) <span class='description'></span><br><span class='end'></span> <b>scaleToSize</b>(size, value) <span class='description'></span><br><span class='end'></span> <b>devidePeriod</b>(value, period) <span class='description'></span><br><span class='end'></span> <b>devideAngle</b>(angle) <span class='description'></span><br><span class='end'></span> <b>sinBetweenVectors</b>(A, B) <span class='description'></span><br><span class='end'></span> <b>calcProgress</b>(start, duration) <span class='description'></span><br><span class='end'></span> <b>getSign</b>(x) <span class='description'></span><br><span class='end'></span> <b>absMin</b>(a, b) <span class='description'></span><br><span class='end'></span> <b>secToMs</b>(x) <span class='description'></span><br><span class='end'></span> <b>isEqual</b>(a, b, epsilon) <span class='description'></span><br><span class='end'></span> <b>calcPivotX</b>(pivot, x, w) <span class='description'></span><br><span class='end'></span> <b>calcPivotY</b>(pivot, y, h, yAxis = 1) <span class='description'></span><br><span class='end'></span> <b>clamp</b>(min, max, value) <span class='description'></span><br><h1>../Pack/Pack.js</h1><span class='end'></span> <b>reset</b>(options = {}) <span class='description'></span><br><h1>../Subject/ActionableMix.js</h1><span class='end'>void</span> <b>reset</b>(options = {}) <span class='description'>Reset</span><br><span class='end'></span> <b>ActionableMix</b>(base) <span class='description'>Mix Actionable to base</span><br><h1>../Subject/index.js</h1><span class='end'>new Subject or similar</span> <b>make</b>(options = {}) <span class='description'>Create new subject</span><br><h1>../Subject/RelationshipMix.js</h1><span class='end'>void</span> <b>reset</b>(options = {}) <span class='description'>Reset</span><br><span class='end'></span> <b>RelationshipMix</b>(base) <span class='description'>Mix Relationship to base</span><br><h1>../Subject/Subject.js</h1><span class='end'>void</span> <b>reset</b>(options = {}) <span class='description'>Reset</span><br>
	</body>
</html>
