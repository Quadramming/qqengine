<!DOCTYPE html>
<html>
	<head>
		<title></title>
		<meta charset='utf-8'>
		<style type='text/css'>
			.end {color: red}
			.extends {color: grey}
			.description {color: blue; margin-left: 10px}
		</style>
	</head>
	<body>
		<h1>
		Application
		<span class='extends'></span>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(config)  <span class='description'></span><br><span class='end'></span> <b>_init</b>()  <span class='description'></span><br><span class='end'></span> <b>_loadResources</b>(cb)  <span class='description'></span><br><span class='end'></span> <b>_waitResources</b>(cb)  <span class='description'></span><br><span class='end'></span> <b>initMouseEvents</b>()  <span class='description'></span><br><span class='end'></span> <b>_getPointerOnCanvas</b>()  <span class='description'></span><br><span class='end'></span> <b>storage</b>(key, value)  <span class='description'></span><br><span class='end'></span> <b>setSz</b>(...args)  <span class='description'></span><br><span class='end'></span> <b>pause</b>()  <span class='description'></span><br><span class='end'></span> <b>popUp</b>(sz, input)  <span class='description'></span><br><span class='end'></span> <b>closePopUp</b>()  <span class='description'></span><br><span class='end'></span> <b>getActiveSz</b>()  <span class='description'></span><br><span class='end'></span> <b>getResolution</b>()  <span class='description'></span><br><span class='end'></span> <b>getImgByUrl</b>(imgSrc)  <span class='description'></span><br><span class='end'></span> <b>getImg</b>(imageSource)  <span class='description'></span><br><span class='end'></span> <b>createSprite</b>(img)  <span class='description'></span><br><span class='end'></span> <b>getImgCanvas</b>(image)  <span class='description'></span><br><span class='end'></span> <b>getHtmlCanvas</b>()  <span class='description'></span><br><span class='end'></span> <b>getHtmlContext</b>()  <span class='description'></span><br><span class='end'></span> <b>showFpsDetails</b>()  <span class='description'></span><br><span class='end'></span> <b>onBackButton</b>()  <span class='description'></span><br><span class='end'></span> <b>addOnResize</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>playSound</b>(str, options)  <span class='description'></span><br><span class='end'></span> <b>controlSound</b>(str, options)  <span class='description'></span><br><span class='end'></span> <b>_gameLoop</b>(time)  <span class='description'></span><br><span class='end'></span> <b>_tick</b>()  <span class='description'></span><br><span class='end'></span> <b>_draw</b>()  <span class='description'></span><br><br><hr><h1>
		Point
		<span class='extends'>extends XY</span>
	</h1>METHODS <br><span class='end'></span> <b>cloneOposite</b>()  <span class='description'></span><br><span class='end'></span> <b>clone</b>()  <span class='description'></span><br><br><hr><h1>
		XY
		<span class='extends'></span>
	</h1>STATIC METHODS <br><span class='end'>new XY</span> <b>ZERO</b>()  <span class='description'></span><br><span class='end'>new XY</span> <b>addition</b>(point1, point2)  <span class='description'></span><br><span class='end'>new XY</span> <b>subtraction</b>(point1, point2)  <span class='description'></span><br><br>METHODS <br><span class='end'></span> <b>constructor</b>(x = 0, y = x)  <span class='description'>x can be vector</span><br><span class='end'>this</span> <b>set</b>(x = 0, y = x)  <span class='description'></span><br><span class='end'>this</span> <b>copy</b>(point)  <span class='description'></span><br><span class='end'>this</span> <b>copyOrSet</b>(point, x, y)  <span class='description'></span><br><span class='end'>new XY</span> <b>clone</b>()  <span class='description'></span><br><span class='end'>new XY</span> <b>cloneOposite</b>()  <span class='description'></span><br><span class='end'>void</span> <b>fixNaNToSimilar</b>(point)  <span class='description'></span><br><span class='end'>boolean</span> <b>isZero</b>()  <span class='description'></span><br><span class='end'>boolean</span> <b>isEquals</b>(point)  <span class='description'></span><br><span class='end'>boolean</span> <b>isCorrect</b>()  <span class='description'>Has no NaN</span><br><span class='end'>boolean</span> <b>isNear</b>(point, epsilon = 0)  <span class='description'></span><br><span class='end'>boolean</span> <b>hasNaN</b>()  <span class='description'></span><br><span class='end'>boolean</span> <b>isFilled</b>()  <span class='description'>Has no NaN</span><br><span class='end'>this</span> <b>oposite</b>()  <span class='description'></span><br><span class='end'>AXIS</span> <b>getNaNAxis</b>()  <span class='description'></span><br><span class='end'>number</span> <b>getDistance</b>(point)  <span class='description'></span><br><span class='end'>number</span> <b>getLength</b>()  <span class='description'></span><br><span class='end'>number</span> <b>getRatio</b>()  <span class='description'></span><br><span class='end'>number</span> <b>x</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>number</span> <b>y</b>(value) {getter/setter} <span class='description'></span><br><span class='end'>this</span> <b>translate</b>(point)  <span class='description'></span><br><span class='end'>this</span> <b>add</b>(point)  <span class='description'></span><br><span class='end'>this</span> <b>sub</b>(point)  <span class='description'></span><br><span class='end'>string</span> <b>toString</b>()  <span class='description'></span><br><span class='end'>void</span> <b>debug</b>()  <span class='description'>console log</span><br><br>PRIVATE METHODS <br><span class='end'>void</span> <b>#check</b>(value)  <span class='description'>Check if value number</span><br><br>PRIVATE FIELDS <br><b>#x</b> <span class='description'>X value</span><br><b>#y</b> <span class='description'>Y value</span><br><br><hr><h1>
		RelationshipMix
		<span class='extends'>extends base</span>
	</h1>METHODS <br><span class='end'></span> <b>constructor</b>(options)  <span class='description'></span><br><span class='end'></span> <b>destructor</b>()  <span class='description'></span><br><span class='end'></span> <b>reset</b>(options)  <span class='description'></span><br><span class='end'></span> <b>parent</b>(parent)  <span class='description'></span><br><span class='end'></span> <b>subjects</b>()  <span class='description'></span><br><span class='end'></span> <b>addSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>deleteSubjects</b>()  <span class='description'></span><br><span class='end'></span> <b>stealSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>spliceSubject</b>(subj)  <span class='description'></span><br><span class='end'></span> <b>cleanRelationships</b>()  <span class='description'></span><br><span class='end'></span> <b>forAllSubjects</b>(fn)  <span class='description'></span><br><span class='end'></span> <b>forSubjects</b>(fn)  <span class='description'></span><br><br><hr>
	</body>
</html>
